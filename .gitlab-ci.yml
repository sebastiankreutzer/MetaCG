# File: .gitlab-ci.yml
# License: Part of the MetaCG proect. Licensed under BSD 3 clause license. See LICENSE.txt file at https://github.com/jplehr/pira/LICENSE.txt
# Description: File to configure our Gitlab CI
include: .ci-defaults-template.yml

# Stages
stages:
  - download
  - lint
  - build-deps
  - build
  - test
  - integration-test
  - install

.job-setup: &job-setup
  parallel:
    matrix:
      - GCC: 10
        #LLVM: [10.0.1, 11.1.0, 12.0.1, 13.0.0, 14.0.0]
        LLVM: [10.0.1, 14.0.0]
      - GCC: 11
        LLVM: [13.0.0, 14.0.0]
  variables:
    MCG_BUILD: build-GCC-$GCC-LLVM-$LLVM


# State: Download
mcg-download:
  stage: download
  variables:
    GIT_STRATEGY: clone
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Done.'


# Stage: lint
mcg-cmake-lint:
  stage: lint
  script:
    - for f in $(find . -name "CMakeLists.txt"); do cmake-format --check $f || exit 1; done
    - for f in $(find ./cmake -type f); do cmake-format --check $f || exit 1; done


# Stage: build-deps
build-dependencies:
  stage: build-deps
  script:
    - ./build_submodules.sh

mcg-container:
  stage: build
  tags:
    - podman
  variables:
    GIT_STRATEGY: clone
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - podman login ${CI_REGISTRY} -u ${CI_CONTAINER_REG_USER} -p ${CONTAINER_REGISTRY_READ_TOKEN}
    - podman build -t registry.git.rwth-aachen.de/tuda-sc/projects/metacg/metacg:$CI_COMMIT_SHA -f container/metacg .
    - podman run --rm -t metacg:$CI_COMMIT_SHA /opt/metacg/metacg/build/pgis/test/unit/pgistests
    - podman run --rm -t metacg:$CI_COMMIT_SHA /opt/metacg/metacg/build/graph/test/unit/libtests
    - podman image rm metacg:$CI_COMMIT_SHA


# Stage: build
build-mcg:
  <<: *job-setup
  stage: build
  script:
    - module load clang/$LLVM
    - cmake -S . -B $MCG_BUILD -DCMAKE_BUILD_TYPE=Debug 
        -DCMAKE_INSTALL_PREFIX=/tmp/metacg/full
        -DCUBE_LIB=$(dirname $(which cube_info))/../lib 
        -DCUBE_INCLUDE=$(dirname $(which cube_info))/../include/cubelib
        -DEXTRAP_INCLUDE=./extern/install/extrap/include 
        -DEXTRAP_LIB=./extern/install/extrap/lib 
        -DSPDLOG_BUILD_SHARED=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build $MCG_BUILD --parallel
    - module purge

build-mcg-stripped-pgis:
  <<: *job-setup
  stage: build
  script:
    - module load clang/$LLVM
    - cmake -S . -B $MCG_BUILD-no-pgis -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_INSTALL_PREFIX=/tmp/metacg/no_pgis
      -DCUBE_LIB=$(dirname $(which cube_info))/../lib
      -DCUBE_INCLUDE=$(dirname $(which cube_info))/../include/cubelib
      -DEXTRAP_INCLUDE=./extern/install/extrap/include
      -DEXTRAP_LIB=./extern/install/extrap/lib
      -DWITH_PGIS=OFF
      -DSPDLOG_BUILD_SHARED=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build $MCG_BUILD-no-pgis --parallel
    - module purge

build-mcg-stripped-cgcollector:
  <<: *job-setup
  stage: build
  script:
    - module load clang/$LLVM
    - cmake -S . -B $MCG_BUILD-no-cgcollector -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_INSTALL_PREFIX=/tmp/metacg/no_cgcollector
      -DCUBE_LIB=$(dirname $(which cube_info))/../lib
      -DCUBE_INCLUDE=$(dirname $(which cube_info))/../include/cubelib
      -DEXTRAP_INCLUDE=./extern/install/extrap/include
      -DEXTRAP_LIB=./extern/install/extrap/lib
      -DWITH_CGCOLLECTOR=OFF
      -DSPDLOG_BUILD_SHARED=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build $MCG_BUILD-no-cgcollector --parallel
    - module purge

build-mcg-stripped-all:
  <<: *job-setup
  stage: build
  script:
    - module load clang/$LLVM
    - cmake -S . -B $MCG_BUILD-no-all -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_INSTALL_PREFIX=/tmp/metacg/no_all
      -DCUBE_LIB=$(dirname $(which cube_info))/../lib
      -DCUBE_INCLUDE=$(dirname $(which cube_info))/../include/cubelib
      -DEXTRAP_INCLUDE=./extern/install/extrap/include
      -DEXTRAP_LIB=./extern/install/extrap/lib
      -DWITH_PGIS=OFF
      -DWITH_CGCOLLECTOR=OFF
      -DSPDLOG_BUILD_SHARED=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build $MCG_BUILD-no-all --parallel
    - module purge


# Stage: test
test-cgc:
  <<: *job-setup
  stage: test
  script:
    - module load clang/$LLVM
    - cd cgcollector/test
    - mkdir -p log
    - bash run_format_one_test.sh -b $MCG_BUILD
    - bash run_format_two_test.sh -b $MCG_BUILD

test-graphlib:
  <<: *job-setup
  stage: test
  script:
    - module load clang/$LLVM
    - cd $MCG_BUILD/graph/test/unit && ./libtests --gtest_output=xml:gcc-$GCC-llvm-$LLVM.xml
    - GCCv=$GCC && LLVMv=$LLVM && sed -i -e "s/Test\"/Test-gcc-$GCCv-llvm-$LLVMv\"/g" gcc-$GCC-llvm-$LLVM.xml
  artifacts:
    when: always
    paths:
      - $MCG_BUILD/graph/test/unit/gcc-$GCC-llvm-$LLVM.xml
    reports:
      junit: $MCG_BUILD/graph/test/unit/gcc-$GCC-llvm-$LLVM.xml

test-pgis:
  <<: *job-setup
  stage: test
  script:
    - module load clang/$LLVM
    - cd $MCG_BUILD/pgis/test/unit && ./pgistests --gtest_output=xml:gcc-$GCC-llvm-$LLVM.xml
    - GCCv=$GCC && LLVMv=$LLVM && sed -i -e "s/Test\"/Test-gcc-$GCCv-llvm-$LLVMv\"/g" gcc-$GCC-llvm-$LLVM.xml
  artifacts:
    when: always
    paths:
      - $MCG_BUILD/pgis/test/unit/gcc-$GCC-llvm-$LLVM.xml
    reports:
      junit: $MCG_BUILD/pgis/test/unit/gcc-$GCC-llvm-$LLVM.xml


# Stage: integration-test
test-cgvalidate:
  <<: *job-setup
  stage: integration-test
  script:
    - cd cgcollector/test/integration
    - ./runner.sh $MCG_BUILD

test-basic-pgis:
  <<: *job-setup
  stage: integration-test
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./basicTestRunner.sh -b $MCG_BUILD

test-static-pgis:
  <<: *job-setup
  stage: integration-test
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh -t static -b $MCG_BUILD

test-modeling-pgis:
  <<: *job-setup
  stage: integration-test
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh -t modeling -b $MCG_BUILD

test-dynamic-pgis:
  <<: *job-setup
  stage: integration-test
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh -t dynamic -b $MCG_BUILD
    
test-imbalance-pgis:
  <<: *job-setup
  stage: integration-test
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh -t imbalance -b $MCG_BUILD


# Stage: install
install-mcg:
  <<: *job-setup
  stage: install
  script:
    - cmake --install $MCG_BUILD
    - stat /tmp/metacg/full/bin/cgcollector
    - stat /tmp/metacg/full/bin/cgmerge
    - export LD_LIBRARY_PATH=/tmp/metacg/full/lib:$LD_LIBRARY_PATH
    - /tmp/metacg/full/bin/cgcollector --help
    - rm -r /tmp/metacg/full

install-pgis:
  <<: *job-setup
  stage: install
  script:
    - module load clang/$LLVM
    - export LD_LIBRARY_PATH=$PWD/extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cmake --install $MCG_BUILD
    - stat /tmp/metacg/full/bin/pgis_pira
    - export LD_LIBRARY_PATH=/tmp/metacg/full/lib:$LD_LIBRARY_PATH
    - /tmp/metacg/full/bin/pgis_pira --help
    - rm -r /tmp/metacg/full
